{"version":3,"sources":["App.js","index.js"],"names":["App","useState","tasksList","setTasksList","inputValue","setInputValue","currentPage","setCurrentPage","totalPages","setTotalPages","useEffect","loadData","addOrUpdateTask","task","a","_id","axios","put","post","name","overline","page","url","get","then","response","data","pages","deleteTask","id","delete","className","type","value","aria-label","onChange","event","target","onClick","length","scope","table","i","push","console","log","generateTable","disabled","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sQAsKeA,MAlKf,WACE,MAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAoCF,mBAAS,IAA7C,mBAAOG,EAAP,KAAmBC,EAAnB,KACA,EAAsCJ,mBAAS,GAA/C,mBAAOK,EAAP,KAAoBC,EAApB,KACA,EAAoCN,qBAApC,mBAAOO,EAAP,KAAmBC,EAAnB,KAEAC,qBAAU,WACRC,EAAS,KACR,IAEHD,qBAAU,WACRC,EAASL,KACR,CAACA,IAEJ,IAMMM,EAAe,uCAAG,WAAOC,GAAP,SAAAC,EAAA,0DAClBD,IAAQA,EAAKE,IADK,gCAEdC,IAAMC,IAAI,+BAAgCJ,GAF5B,6CAIdG,IAAME,KAAK,+BAAgC,CAC/CC,KAAMf,EACNgB,UAAU,IANQ,OAStBf,EAAc,IACdM,EAASL,GAVa,2CAAH,sDAiBfK,EAAQ,uCAAG,WAAOU,GAAP,eAAAP,EAAA,6DACfX,EAAa,IACTmB,EAFW,0CAE8BD,GAF9B,SAITL,IAAMO,IAAID,GAAKE,MAAK,SAACC,GACzBtB,EAAasB,EAASC,KAAKA,MAC3BjB,EAAcgB,EAASC,KAAKC,UANf,2CAAH,sDAURC,EAAU,uCAAG,WAAOC,GAAP,SAAAf,EAAA,sEACXE,IAAMc,OAAN,uCAA6CD,IADlC,OAEjBlB,EAASL,GACTD,EAAc,IAHG,2CAAH,sDAiDhB,OACE,sBAAK0B,UAAU,wBAAf,UACE,oBAAIA,UAAU,YAAd,sBACA,sBAAKA,UAAU,cAAf,UACE,uBACEC,KAAK,OACLD,UAAU,0BACVZ,KAAK,OACLc,MAAO7B,EACP8B,aAAW,4CACXC,SAzEU,SAACC,GACjB/B,EAAc+B,EAAMC,OAAOJ,UA2EvB,wBACED,KAAK,SACLD,UAAU,sCACVO,QAAS,kBAAM1B,KAHjB,yBAQDV,EAAUqC,OACT,wBAAOR,UAAU,QAAjB,UACE,gCACE,+BACE,oBAAIS,MAAM,MAAV,eACA,oBAAIA,MAAM,MAAV,kBACA,oBAAIA,MAAM,MAAV,yBAGJ,gCAjEc,WAGpB,IAFA,IAAMC,EAAQ,GADY,WAGjBC,GACPD,EAAME,KACJ,+BACE,oBAAIZ,UAAW7B,EAAUwC,GAAGtB,SAAW,cAAgB,GAAvD,SACG,GAAKd,EAAc,IAAMoC,EAAI,KAEhC,oBAAIX,UAAW7B,EAAUwC,GAAGtB,SAAW,cAAgB,GAAvD,SACGlB,EAAUwC,GAAGvB,OAEhB,+BACE,wBACEa,KAAK,SACLD,UAAU,+BACVO,QAAS,kBAAMV,EAAW1B,EAAUwC,GAAG3B,MAHzC,SAKE,0BAAUI,KAAK,oBAGjB,wBACEa,KAAK,SACLD,UAAU,kCACVO,QAAS,kBAvEKzB,EAuEkBX,EAAUwC,GAtEpDE,QAAQC,IAAIhC,GACZA,EAAKO,UAAYP,EAAKO,cACtBR,EAAgBC,GAHO,IAACA,GAoEhB,SAKE,0BAAUM,KAAK,kCArBZjB,EAAUwC,GAAG3B,OAFjB2B,EAAI,EAAGA,EAAIxC,EAAUqC,OAAQG,IAAM,EAAnCA,GA6BT,OAAOD,EAiCOK,QAGV,IAGD5C,EAAUqC,OACT,sBAAKR,UAAU,uBAAf,UACE,wBACEA,UAAU,2CACVgB,SAA0B,IAAhBzC,EACVgC,QAAS,WA/EjB/B,EAAeD,EAAc,IA4EvB,SAKG,MAEH,wBACEyB,UAAU,wDACVgB,UAAQ,EAFV,SAIGzC,IAEH,wBACEyB,UAAU,2CACVgB,SAAUzC,IAAgBE,EAC1B8B,QAAS,WAhGjB/B,EAAeD,EAAc,IA6FvB,SAKG,SAIL,QC3JR0C,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.63a121ec.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport \"./App.css\";\n\nfunction App() {\n  const [tasksList, setTasksList] = useState([]);\n  const [inputValue, setInputValue] = useState(\"\");\n  const [currentPage, setCurrentPage] = useState(1);\n  const [totalPages, setTotalPages] = useState();\n\n  useEffect(() => {\n    loadData(1);\n  }, []);\n\n  useEffect(() => {\n    loadData(currentPage);\n  }, [currentPage]);\n\n  const selectAsComplete = (task) => {\n    console.log(task);\n    task.overline = !task.overline;\n    addOrUpdateTask(task);\n  };\n\n  const addOrUpdateTask = async (task) => {\n    if (task && task._id) {\n      await axios.put(\"http://localhost:3001/update\", task);\n    } else {\n      await axios.post(\"http://localhost:3001/insert\", {\n        name: inputValue,\n        overline: false,\n      });\n    }\n    setInputValue(\"\");\n    loadData(currentPage);\n  };\n\n  const userInput = (event) => {\n    setInputValue(event.target.value);\n  };\n\n  const loadData = async (page) => {\n    setTasksList([]);\n    let url = `http://localhost:3001/read?page=${page}`;\n\n    await axios.get(url).then((response) => {\n      setTasksList(response.data.data);\n      setTotalPages(response.data.pages);\n    });\n  };\n\n  const deleteTask = async (id) => {\n    await axios.delete(`http://localhost:3001/delete/${id}`);\n    loadData(currentPage);\n    setInputValue(\"\");\n  };\n\n  const nextPage = () => {\n    setCurrentPage(currentPage + 1);\n  };\n\n  const previousPage = () => {\n    setCurrentPage(currentPage - 1);\n  };\n\n  const generateTable = () => {\n    const table = [];\n\n    for (let i = 0; i < tasksList.length; i++) {\n      table.push(\n        <tr key={tasksList[i]._id}>\n          <td className={tasksList[i].overline ? \"is-complete\" : \"\"}>\n            {5 * (currentPage - 1) + (i + 1)}\n          </td>\n          <td className={tasksList[i].overline ? \"is-complete\" : \"\"}>\n            {tasksList[i].name}\n          </td>\n          <td>\n            <button\n              type=\"button\"\n              className=\"btn btn-danger delete-button\"\n              onClick={() => deleteTask(tasksList[i]._id)}\n            >\n              <ion-icon name=\"trash-outline\"></ion-icon>\n            </button>\n\n            <button\n              type=\"button\"\n              className=\"btn btn-success complete-button\"\n              onClick={() => selectAsComplete(tasksList[i])}\n            >\n              <ion-icon name=\"checkmark-done-outline\"></ion-icon>\n            </button>\n          </td>\n        </tr>\n      );\n    }\n    return table;\n  };\n\n  return (\n    <div className=\"container todoMainApp\">\n      <h1 className=\"headTitle\">Todo App</h1>\n      <div className=\"input-group\">\n        <input\n          type=\"text\"\n          className=\"form-control task-input\"\n          name=\"name\"\n          value={inputValue}\n          aria-label=\"Text input with segmented dropdown button\"\n          onChange={userInput}\n        />\n\n        <button\n          type=\"submit\"\n          className=\"btn btn-outline-light submit-button\"\n          onClick={() => addOrUpdateTask()}\n        >\n          Add Task\n        </button>\n      </div>\n      {tasksList.length ? (\n        <table className=\"table\">\n          <thead>\n            <tr>\n              <th scope=\"col\">#</th>\n              <th scope=\"col\">Name</th>\n              <th scope=\"col\">Action</th>\n            </tr>\n          </thead>\n          <tbody>{generateTable()}</tbody>\n        </table>\n      ) : (\n        \" \"\n      )}\n\n      {tasksList.length ? (\n        <div className=\"pagination-container\">\n          <button\n            className=\"btn btn-outline-light pagination-buttons\"\n            disabled={currentPage === 1}\n            onClick={() => previousPage()}\n          >\n            {\"<\"}\n          </button>\n          <button\n            className=\"btn btn-outline-light pagination-buttons current-page\"\n            disabled\n          >\n            {currentPage}\n          </button>\n          <button\n            className=\"btn btn-outline-light pagination-buttons\"\n            disabled={currentPage === totalPages}\n            onClick={() => nextPage()}\n          >\n            {\">\"}\n          </button>\n        </div>\n      ) : (\n        \" \"\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}